What happens when you initialize a repository? Why do you need to do it?

	Answer: Git transforms the folder into a repository. It creates the .git (hidden) folder. We need it so that we can use git to source control the files in the repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	Answer: The staging area sits between the working directory and the repository. The working directory is your hard drive. The repository is what tracks the commits. The staging area is what you're working on and what will get committed to the repository.

How can you use the staging area to make sure you have one commit per logical
change?

	Answer: git add only the files that you want in that commit. you can use git diff to compare working directory to staging before you git add. And then you once you git add, you can use git diff --staging to compare the stage to repository. If this shows the expected changes, then git commit to add the changes.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Answer: Branches help when you want to do different versions of a code (e.g. different language or easy mode) or when you want to try something and you want to have a main version to go back to.

How do the diagrams help you visualize the branch structure?

	Answer: It shows where each branch broke off and how they relate to each other.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	Answer: Merging allows you to combine multiple workstreams in different branches.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	Answer: If manual, then it's a lot of work from our end. Automatic merging makes things easier, but there are possible errors if Git does something automatically that we don't want.